typedef int const __attribute__((aligned(2))) const __attribute__((aligned(4))) INT;
2

typedef int __attribute__((aligned(1))) const __attribute__((aligned(2))) const __attribute__((aligned(4))) INT;
1
===============
#Change order of type checking

void _setValue(int base, int offset, value) {
    if (value is double) {
      value = value.toInt();
    }

    if (value is int) {
      Unsafe.writeInt32(base, offset, value);
    } else {
      super._setValue(base, offset, value);
    }
  }

 =================
 Arrays with zero-length should not check length.
 Suitable with flexible arrays in structs
  =================
  POINTER align cannot be decreased
  STRUCT align not less then largest align